import {
  Button,
  ButtonBase,
  Checkbox,
  FormControlLabel,
  IconButton,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  TextField,
  Typography,
} from '@mui/material'
import { DesktopDatePicker } from '@mui/x-date-pickers'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useForm } from 'react-hook-form'
import { Expense } from '../api/expense/types'
import { useCreateExpense } from '../hooks/useCreateExpense'
import { useFindExpenses } from '../hooks/useFindExpenses'
import { useGetCurrentUser } from '../hooks/useGetCurrentUser'
import styles from '../styles/Home.module.css'
import {
  AttachMoney,
  Delete as DeleteIcon,
  Edit as EditIcon,
} from '@mui/icons-material'
import { useDeleteExpense } from '../hooks/useDeleteExpense'
import { useRouter } from 'next/router'
import { useEffect } from 'react'
import { addErrorEventListener } from '../api/utils'
import { useLogout } from '../hooks/useLogout'

const Home: NextPage = () => {
  const { push, query } = useRouter()
  const queryDateString =
    typeof query.date === 'string' ? query.date : undefined
  const queryDate = queryDateString
    ? new Date(queryDateString.replaceAll('+', ' '))
    : undefined

  const { register, handleSubmit, reset } = useForm<Omit<Expense, 'id'>>()
  const { data: currentUser } = useGetCurrentUser()
  const { data: dailyExpenses } = useFindExpenses(
    {
      account_id: currentUser?.id,
      transaction_date: queryDateString,
    },
    {
      enabled: !!(currentUser?.id && queryDateString),
    }
  )

  const transaction_date_start = queryDate
    ? new Date(queryDate.getFullYear(), queryDate.getMonth(), 1).toDateString()
    : undefined

  const transaction_date_end = queryDate
    ? new Date(
        queryDate.getFullYear(),
        queryDate.getMonth() + 1,
        0
      ).toDateString()
    : undefined

  const { data: monthlyExpenses } = useFindExpenses(
    {
      account_id: currentUser?.id,
      transaction_date_end,
      transaction_date_start,
      recurring: false,
    },
    {
      enabled: !!(currentUser?.id && queryDate),
    }
  )

  const { data: recurringExpenses } = useFindExpenses(
    {
      account_id: currentUser?.id,
      recurring: true,
    },
    {
      enabled: !!(currentUser?.id && queryDate),
    }
  )

  const monthlyExpensesTotal =
    monthlyExpenses && recurringExpenses
      ? [...recurringExpenses, ...monthlyExpenses].reduce(
          (acc, { amount }) => acc + amount,
          0
        ) / 100
      : 0

  useEffect(() => {
    const unsubscribe = addErrorEventListener((error) => {
      console.log('error :>> ', error)
      if (error.status === 401) {
        push('/login')
      }
    })

    return () => unsubscribe()
  }, [push])

  const deleteExpense = useDeleteExpense()

  const createExpense = useCreateExpense({
    onSettled: () => {
      reset()
    },
  })

  useEffect(() => {
    if (!queryDateString) {
      push({
        query: {
          date: new Date().toDateString(),
        },
      })
    }
  }, [push, queryDateString])

  const logout = useLogout()

  const dailyExpensesTotal = dailyExpenses
    ? dailyExpenses.reduce((acc, { amount }) => acc + amount, 0) / 100
    : 0

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <header>
          {currentUser && (
            <ButtonBase
              onClick={async () => {
                await logout.mutate()
                push('/login')
              }}
            >
              <Image
                alt={`${currentUser.first_name} ${currentUser.last_name}`}
                src={currentUser.avatar}
                width={40}
                height={40}
              />
            </ButtonBase>
          )}
          <Typography component="h1">
            Monthly total:{' '}
            {new Intl.NumberFormat('en-US', {
              style: 'currency',
              currency: 'USD',
              minimumFractionDigits: 2,
            }).format(monthlyExpensesTotal)}
          </Typography>
        </header>
        {!!queryDateString && (
          <DesktopDatePicker
            label="Date"
            inputFormat="MM/dd/yyyy"
            value={new Date(queryDateString)}
            onChange={(selectedDate) => {
              if (selectedDate) {
                push({
                  query: {
                    date: selectedDate.toDateString(),
                  },
                })
              }
            }}
            renderInput={(params) => <TextField {...params} />}
          />
        )}
        {dailyExpenses && (
          <div>
            <Typography component="h1">
              Daily Total:{' '}
              {new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2,
              }).format(dailyExpensesTotal)}
            </Typography>
            <List>
              {dailyExpenses.map((expense) => (
                <ListItem
                  key={expense.id}
                  secondaryAction={
                    <IconButton
                      onClick={() => {
                        if (!currentUser) {
                          return
                        }
                        deleteExpense.mutate({
                          account_id: currentUser.id,
                          id: expense.id,
                        })
                      }}
                      edge="end"
                      aria-label="delete"
                    >
                      <DeleteIcon />
                    </IconButton>
                  }
                >
                  <ListItemIcon>
                    <EditIcon />
                  </ListItemIcon>
                  <ListItemText
                    primary={`${expense.name} - ${new Intl.NumberFormat(
                      'en-US',
                      {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                      }
                    ).format(expense.amount / 100)}`}
                  />
                </ListItem>
              ))}
            </List>
          </div>
        )}
        <form
          onSubmit={handleSubmit(({ name, amount, recurring }) => {
            if (!currentUser?.id || !queryDateString) {
              return
            }

            createExpense.mutate({
              name,
              amount,
              account_id: currentUser.id,
              transaction_date: new Date(queryDateString).toISOString(),
              recurring,
            })
          })}
        >
          <TextField label="Name" {...register('name')} />
          <TextField
            label="Amount"
            {...register('amount')}
            type="number"
            inputProps={{
              step: '0.01',
            }}
            InputProps={{
              startAdornment: <AttachMoney />,
            }}
          />
          <FormControlLabel
            control={<Checkbox {...register('recurring')} />}
            label="Recurring?"
          />
          <Button variant="outlined" type="submit">
            Submit
          </Button>
        </form>
      </main>
    </div>
  )
}

export default Home
